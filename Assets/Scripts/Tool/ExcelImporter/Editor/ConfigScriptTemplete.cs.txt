// This code automatically generated by ExcelImporter

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Game.Config;

namespace {{ cs_namespace }}
{
#if UNITY_EDITOR
    [Serializable]
#endif
    public partial class {{ class_name }} : {{ baseclass_name }}
    {   {{ for field in fields }}{{ if !field.ignore }}{{ if field.desc != null }}
        /// <summary>
        /// {{ field.desc }}
        /// </summary> {{ end }}
        public {{ field.variate_type }} {{ field.variate_name }};
        {{end}}{{ end }}{{ for field in fields }}{{ if field.ignore  }}
#if UNITY_EDITOR{{ if field.desc != null }}
        /// <summary>
        /// {{ field.desc }}
        /// </summary> {{ end }}
        public {{ field.variate_type }} {{ field.variate_name }};
        
#endif{{end}}{{ end }}
        public static List<{{class_name}}> Load(TextReader reader)
        {
            var result = new List<{{class_name}}>();
            //TODO
            return result;
        }
        
    }
{{ for enum in enums }}
    public enum {{ enum.name }}
    {   {{ for value in enum.values }}
        {{ value }},{{end}}
    }
    {{ end }}
    public sealed partial class {{ config_manager }} : {{ csv_managerbase }}
    { 
        private readonly List<{{ class_name }}> _dataList;
    {{ for field in fields }}{{ if field.key }}
        private readonly Dictionary<{{ field.variate_type }}, {{ class_name }}> _data{{ field.variate_name_upper }}Dic;{{ else if field.union }}
        private readonly Dictionary<{{ field.variate_type }}, List<{{ class_name }}>> _data{{ field.variate_name_upper }}UnionDic;{{ end }}{{end}}
        public {{ config_manager }}(TextReader reader)
        {
            _dataList = {{ class_name }}.Load(reader);{{ for field in fields }}{{ if field.key }}
            _data{{ field.variate_name_upper }}Dic = _dataList.ToDictionary(data => data.{{ field.variate_name }});{{ else if field.union }}
            _data{{ field.variate_name_upper }}UnionDic = new Dictionary<{{field.variate_type}}, List<{{ class_name }}>>();
            foreach (var data in _dataList)
            {
            	_data{{ field.variate_name_upper }}UnionDic.CreateOrAddToList(data.{{ field.variate_name }}, data);
            }{{ end }}{{ end }}
        }
        public List<{{class_name}}> GetDataList() => _dataList;
        public {{class_name}} GetDataAt(int i)
        {
            return _dataList.Count <= i || i < 0 ? null : _dataList[i];
        }
        {{ for field in fields }}{{ if field.key }}
        public {{ class_name }} GetDataBy{{ field.variate_name_upper }}({{ field.variate_type }} value)
        {
            return _data{{ field.variate_name_upper }}Dic.TryGetValue(value, out var outValue) ? outValue : null;
        }
        {{ else if field.union }}
        public List<{{ class_name }}> GetUnionDataBy{{ field.variate_name_upper }}({{ field.variate_type }} value)
        {
            return _data{{ field.variate_name_upper }}UnionDic[value];
        }{{ end }}{{ end }}
    }
}